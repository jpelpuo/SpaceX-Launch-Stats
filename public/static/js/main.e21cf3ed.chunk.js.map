{"version":3,"sources":["logo.jpg","components/NavBar.js","components/LaunchItem.js","components/MissionKey.js","components/Launches.js","pages/Launch.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navbar","className","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","LaunchItem","launch","flight_number","mission_name","launch_date_local","launch_success","classNames","format","to","MissionKey","LAUNCHES_QUERY","gql","Launches","useQuery","loading","error","data","launches","map","key","renderLaunchItems","LAUNCH_QUERY","Launch","match","params","variables","console","log","launch_year","rocket","rocket_id","rocket_name","rocket_type","renderLaunchDetails","client","ApolloClient","uri","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.e21cf3ed.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.7dab9996.jpg\";","import React from 'react';\nimport logo from '../logo.jpg'\nconst Navbar = () => {\n    return (\n        <div>\n            <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\n                <a className=\"navbar-brand\" href=\"#\">SpaceX Mission Statistics</a>\n                <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarColor02\" aria-controls=\"navbarColor02\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                    <span className=\"navbar-toggler-icon\"></span>\n                </button>\n            </nav>\n        </div>\n\n    );\n}\n\nexport default Navbar;","import React from 'react';\nimport classNames from 'classnames';\nimport Moment from 'react-moment';\nimport {Link} from 'react-router-dom';\n\nconst LaunchItem = ({ launch: { flight_number, mission_name, launch_date_local, launch_success } }) => {\n    return (\n        <div className=\"card card-body mb-3\">\n            <div className=\"row\">\n                <div className=\"col-md-9\">\n                    <h4>Mission: <span className={classNames({\n                        'text-success' : launch_success,\n                        'text-danger': !launch_success\n                    })}>{mission_name}</span></h4>\n                    <p>Launch Date: <Moment format=\"YYYY-MM-DD HH:mm\">{launch_date_local}</Moment></p>\n                </div>\n                <div className=\"col-md-3\">\n                    <Link to={`/launch/${flight_number}`} className=\"btn btn-secondary\">Launch Details</Link>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default LaunchItem;","import React from 'react';\n\nconst MissionKey = () => {\n    return (\n        <div className=\"my-3\">\n            <p>\n                <span className=\"px-3 mr-2 bg-success\" />\n                    = Success\n            </p>\n\n            <p>\n                <span className=\"px-3 mr-2 bg-danger\" />\n                    = Failure\n            </p>\n        </div>\n    );\n}\n\nexport default MissionKey;","import React, { Fragment } from 'react';\nimport { gql } from 'apollo-boost';\nimport { useQuery } from '@apollo/react-hooks';\nimport LaunchItem from './LaunchItem';\nimport MissionKey from './MissionKey'\n\nconst LAUNCHES_QUERY = gql`\n    query LaunchesQuery{\n        launches {\n            flight_number\n            mission_name\n            launch_date_local\n            launch_success\n        }\n    }\n`\n\nconst renderLaunchItems = ({launches}) => {\n    return (\n        <Fragment>\n            {\n            launches.map(launch => {\n                return <LaunchItem key={launch.flight_number} launch={launch} />\n            })\n            }\n        </Fragment>)\n}\n\nconst Launches = () => {\n    const { loading, error, data } = useQuery(LAUNCHES_QUERY);\n\n    if (loading) return <p>Loading...</p>\n    if (error) return <p>Error...</p>\n\n    return (\n        <Fragment>\n            <h1 className=\"display-4 my-3\">\n                Launches\n            </h1>\n            <MissionKey/>\n\n            {\n                renderLaunchItems(data)\n            }\n        </Fragment>\n    );\n}\n\nexport default Launches;","import React, { Fragment } from 'react';\nimport { gql } from 'apollo-boost';\nimport { useQuery } from '@apollo/react-hooks';\nimport { Link } from 'react-router-dom';\nimport classNames from 'classnames';\n\nconst LAUNCH_QUERY = gql`\n    query LaunchQuery($flight_number: String!){\n        launch(flight_number: $flight_number){\n            flight_number\n            launch_date_local\n            mission_name\n            launch_year\n            launch_success\n            rocket{\n                rocket_id\n                rocket_name\n                rocket_type\n            }\n        }\n    }\n`\n\nconst renderLaunchDetails = ({ mission_name,flight_number, launch_year, launch_success, rocket: { rocket_id, rocket_name, rocket_type } }) => {\n    return (\n        <div>\n            <h1 className=\"display-4 my-3\">\n                <span className=\"text-dark\">{mission_name}</span>\n            </h1>\n            <h4 className=\"mb-3\">Launch Details</h4>\n            <ul className=\"list-group\">\n                <li className=\"list-group-item\">Flight Number: {flight_number}</li>\n                <li className=\"list-group-item\">Launch Year: {launch_year}</li>\n                <li className=\"list-group-item\">Launch Successful: <span className={classNames({\n                    'text-success': launch_success,\n                    'text-danger': !launch_success\n                })}>{launch_success ? \"Yes\" : \"No\"}</span></li>\n                <li className=\"list-group-item\">Flight Number: {flight_number}</li>\n            </ul>\n            <h4 className=\"my-3\">Rocket Details</h4>\n            <ul className=\"list-group\">\n                <li className=\"list-group-item\">Rocket ID: {rocket_id}</li>\n                <li className=\"list-group-item\">Rocket Name: {rocket_name}</li>\n                <li className=\"list-group-item\">Rocket Type: {rocket_type}</li>\n            </ul>\n            <hr/>\n            <Link to=\"/\" className=\"btn btn-secondary\">Back</Link>\n        </div>\n    )\n}\n\n\nconst Launch = ({ match: { params: { flight_number } } }) => {\n\n    const { loading, error, data } = useQuery(LAUNCH_QUERY, {\n        variables: { flight_number: flight_number }\n    });\n\n    if (loading) return <p>Loading...</p>\n\n    if (error) console.log(error)\n\n    return renderLaunchDetails(data.launch);\n}\n\nexport default Launch;","import React from 'react';\nimport './App.css';\nimport Navbar from './components/NavBar';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport Launches from './components/Launches';\nimport Launch from './pages/Launch'\n\nconst client = new ApolloClient({\n  uri: \"/graphql\"\n})\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div className=\"App\">\n          <Navbar />\n          <div className=\"container\">\n            <Route exact path=\"/\" component={Launches}/>\n            <Route exact path=\"/launch/:flight_number\" component={Launch}/>\n          </div>\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}